# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1meP5SL8U420dEx5Nnn-ThtSAdU-azAGo
"""

from flask import Flask, request, jsonify
import pickle
import numpy as np
from PIL import Image
import os # Import the os module

app = Flask(__name__)

# File paths for models
brain_model_path = 'Brain_Tumor_Detectionr_model.pkl'
tb_model_path = 'tb_detector_model.pkl'
pneumonia_model_path = 'chest-xray-pneumonia_detector_model.pkl'

# Load your models, check if files exist
if not os.path.exists(brain_model_path):
    print(f"Error: {brain_model_path} not found. Ensure the file is in the same directory as the script.")
    exit()
else:
    brain_model = pickle.load(open(brain_model_path, 'rb'))

if not os.path.exists(tb_model_path):
    print(f"Error: {tb_model_path} not found. Ensure the file is in the same directory as the script.")
    exit()
else:
    tb_model = pickle.load(open(tb_model_path, 'rb'))

if not os.path.exists(pneumonia_model_path):
    print(f"Error: {pneumonia_model_path} not found. Ensure the file is in the same directory as the script.")
    exit()
else:
    pneumonia_model = pickle.load(open(pneumonia_model_path, 'rb'))


def preprocess_image(image_file):
    # Example preprocessing; adjust as needed for your models
    image = Image.open(image_file)
    image = image.resize((128, 128))  # Resize to match model input
    return np.array(image).reshape(1, -1)

@app.route('/')
def home():
    return "Medical Image Diagnosis API is running!"

@app.route('/predict', methods=['POST'])
def predict():
    model_type = request.form['model']
    image_file = request.files['image']
    preprocessed_image = preprocess_image(image_file)

    if model_type == 'brain':
        prediction = brain_model.predict(preprocessed_image)
    elif model_type == 'tb':
        prediction = tb_model.predict(preprocessed_image)
    elif model_type == 'pneumonia':
        prediction = pneumonia_model.predict(preprocessed_image)
    else:
        return jsonify({'error': 'Invalid model type'}), 400

    return jsonify({'diagnosis': str(prediction[0])})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)